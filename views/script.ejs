<script type="module">
    document.addEventListener("DOMContentLoaded", function() {
      const feedsButton = document.getElementById("feeds");
      const serverButton = document.getElementById("server");
      const requesterButton = document.getElementById("requester");
      const feedPost = document.querySelector(".feed-post");
      const feedInput = document.querySelector(".feed-input");
      const avatarDataInput = document.querySelector("#avatarData");
      const status = document.querySelector("#status");
      const mapLink = document.querySelector("#map-link");
      const uploadedImage = document.querySelector("#image-upload");
      const uploadedVideo = document.querySelector("#video-upload");

      function navigateToPage(page) {
          window.location.href = `./${page}`;
      }
  
      feedsButton.addEventListener("click", () => navigateToPage("login"));
      serverButton.addEventListener("click", () => navigateToPage("kusi-server"));
      requesterButton.addEventListener("click", () => navigateToPage("kusi-client"));

      function appendUploadedFile(uploadedElement, className, parentElement) {
          if (uploadedElement.files.length > 0) {
              const file = uploadedElement.files[0];
              const previewElement = document.createElement(file.type.startsWith("image/") ? "img" : "video");
              previewElement.classList.add(className);
              previewElement.src = URL.createObjectURL(file);
              
              if (file.type.startsWith("video/")){
                  previewElement.setAttribute("controls", "true");
              } 
              parentElement.appendChild(previewElement);
              uploadedElement.value = "";
          }
      }

      async function savePostToLocalStorage(postHTML, randID){
          try{
            const htmlSizeInBytes = new Blob([postHTML]).size;
            const htmlSizeInKB = htmlSizeInBytes / 1024; // KB
            const htmlSizeInMB = htmlSizeInKB / 1024; // MB

            console.log(`HTML size: ${htmlSizeInBytes} bytes (${htmlSizeInKB} KB / ${htmlSizeInMB} MB)`);
            
            const response = await fetch('/new-post', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ content: postHTML, randID: randID })
             })

             if(response.status === 200){
                const result = await response.json();
                // alert(result.message)
             }
             else{
                console.log('Response status', response.status)
                console.log('Response text', await response.text())
                alert("Error updating new posts")
             }
          }
          catch(err){
              console.error(err);
              alert('Error updating new posts');
          }     
      }
  
      function submitFeed() {
        const feedContent = feedInput.value.trim();
        // new add...
        const randID = Math.random();

        if (feedContent !== "") {
          // new edited...
          const newFeedPost = createFeedPost(feedContent, randID);

          feedPost.insertBefore(newFeedPost, feedPost.firstChild);
          feedInput.value = "";

          // new edited...
          savePostToLocalStorage(newFeedPost.outerHTML, randID);

        }
      }
  
      function createFeedPost(content, randID) {
        const newFeedPost = document.createElement("div");
        newFeedPost.classList.add("feed-post-item");
        newFeedPost.style.backgroundColor = "#FFF5E1";

        function createAvatarWithName() {
            const avatar_with_name = document.createElement("div");
            avatar_with_name.classList.add("avatar_with_name");
    
            if ("<%= avatar %>") {
                const userName = document.createElement("p");
                userName.classList.add("user-name");
                userName.textContent = "<%= typeof avatar !== 'undefined' && avatar !== null ? avatar.name : '' %>";
                userName.style.fontWeight = "bold";

                function createAvatarImage() {
                    const newAvatarImage = new Image();
                    newAvatarImage.classList.add("small-avatar");
                    newAvatarImage.src = "data:image/jpeg;base64," + avatarDataInput.value;
                    return newAvatarImage;
                }

                avatar_with_name.appendChild(createAvatarImage());
                avatar_with_name.appendChild(userName);
            }
            return avatar_with_name;
        }
  
        const avatar_with_name = createAvatarWithName(); // add avatar + name
        if (avatarDataInput.value) newFeedPost.appendChild(avatar_with_name);
  
        const feedText = document.createElement("p");
        feedText.textContent = content;
        feedText.style.fontSize = "25px";
        newFeedPost.appendChild(feedText);

        const isImageUploaded = uploadedImage.files.length > 0;
        const isVideoUploaded = uploadedVideo.files.length > 0;

        if(isImageUploaded && isVideoUploaded){
            alert("Please upload either an image or a video, but not both.");
            return;
        }
        else if(isImageUploaded){
            appendUploadedFile(uploadedImage, "uploaded-image", newFeedPost);
        }
        else if(isVideoUploaded){
            appendUploadedFile(uploadedVideo, "uploaded-video", newFeedPost);
        }

        function createButton(text, className, clickHandler) {
            const button = document.createElement("button");
            button.textContent = text;
            button.classList.add(className);
            if (clickHandler) {
               button.addEventListener("click", clickHandler);
            }
            return button;
        }

        function createDeleteButton(post, deleteID) {
            return createButton("Delete", "delete-button", async () => {
                // feedPost.removeChild(post);
                 
                try{
                   const response = await fetch('delete-post', {
                      method: 'DELETE',
                      headers: {
                         'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({ deleteID })
                   });

                   if(response.status === 200){
                      feedPost.removeChild(post);
                      alert('Post deleted successfully');
                   }
                   else{
                      alert('Error deleting post')
                   }
                }
                catch(err){
                   console.error('Error deleting post', err);
                   alert('Error deleting post')
                }
            });
        }
  
        // new add...
        const deleteID = randID;

        // modified...
        const deleteButton = createDeleteButton(newFeedPost, deleteID);
        newFeedPost.appendChild(deleteButton);
  
        return newFeedPost;
      }
  
      function geoFindMe() {
        mapLink.href = "";
        mapLink.textContent = "Locating…";
  
        function success(position) {
          const { latitude, longitude } = position.coords;
          mapLink.href = `https://www.openstreetmap.org/#map=18/${latitude}/${longitude}`;
          mapLink.textContent = `Latitude: ${latitude}°, Longitude: ${longitude}°`;
          mapLink.style.color = "#808000";
          mapLink.style.fontWeight = "bold";
          mapLink.style.marginLeft = '10px';
        }
  
        function error() {
          mapLink.textContent = "Unable to retrieve your location";
        }
  
        if (!navigator.geolocation) {
          mapLink.textContent = "Geolocation is not supported by your browser";
        } 
        else {
          status.textContent = "Locating…";
          navigator.geolocation.getCurrentPosition(success, error);
        }
      }
  
      document.querySelector("#find-me").addEventListener("click", geoFindMe);
      document.querySelector(".send-feed").addEventListener("click", function () {
          submitFeed();
      });

      async function fetchAndDisplayPosts(){
           try{
                const response = await fetch('/getPosts')
                if(!response.ok){
                    alert('Error retrieving user posts')
                }
                const data = await response.json();
                const posts = data.posts;

                for (let i = posts.length - 1; i >= 0; i--) {
                    const post = posts[i];
                    const postElement = document.createElement('div');
                    postElement.innerHTML = post.userNewPost;
                    feedPost.appendChild(postElement);
                }

           }
           catch(err){
                console.error('Error retrieving user posts', err)
                alert('Error retrieving user posts')
           }
      }
      fetchAndDisplayPosts()

  });
</script>



