<script type="module">
    document.addEventListener("DOMContentLoaded", function() {
      const feedsButton = document.getElementById("feeds"); // kusi feeds button
      const serverButton = document.getElementById("server"); // kusi server button
      const requesterButton = document.getElementById("requester"); // kusi client button
      const feedPost = document.querySelector(".feed-post"); // outermost user post box
      const feedInput = document.querySelector(".feed-input"); // user input text box
      const avatarDataInput = document.querySelector("#avatarData"); // user avatar
      const status = document.querySelector("#status"); 
      const mapLink = document.querySelector("#map-link"); 
      const uploadedImage = document.querySelector("#image-upload"); // user photo upload
      const uploadedVideo = document.querySelector("#video-upload"); // user video upload

      function navigateToPage(page) {
          window.location.href = `./${page}`;
      }
  
      // navigate between kusi-server, kusi-feed, and kusi-client
      feedsButton.addEventListener("click", () => navigateToPage("login"));
      serverButton.addEventListener("click", () => navigateToPage("kusi-server"));
      requesterButton.addEventListener("click", () => navigateToPage("kusi-client"));

      async function appendUploadedFile(uploadedElement, className, parentElement) { // if uploaded photo / video detected
          if (uploadedElement.files.length > 0) {
              const file = uploadedElement.files[0]; // get the uploaded content
              const previewElement = document.createElement(file.type.startsWith("image/") ? "img" : "video"); // choose correct content type
              previewElement.classList.add(className); // add the correct type name

              // Create a FileReader to read the content stored in the img or video tag
              const reader = new FileReader();

              // Define an event handler when the reading is done
              reader.onload = async function() {
                  const base64Data = await reader.result; // this value is only valid when there is user input stored in the img or video
                //   console.log(base64Data)
                //   previewElement.src = base64Data;
                  previewElement.src = base64Data
                //   await submitFeed()
                //   console.log(previewElement)
                             
                //   parentElement.appendChild(previewElement);

                //   console.log(parentElement)

                //   uploadedElement.value = "";   
              };

              if (file.type.startsWith("video/")){
                  previewElement.setAttribute("controls", "true");
              }

              parentElement.appendChild(previewElement);

              // console.log(parentElement)

              uploadedElement.value = ""; // clear the upload buffer for future upload content   

              reader.readAsDataURL(file); // add the uploaded content to reader 

            //   if (file.type.startsWith("video/")){
            //      previewElement.setAttribute("controls", "true");
            //   } 

            //   parentElement.appendChild(previewElement);
            //   uploadedElement.value = "";   
          };

              // console.log(previewElement)

              // Read the image file as a data URL (base64 encoding)
            //   reader.readAsDataURL(file);

              // previewElement.src = URL.createObjectURL(file);
              
            //   if (file.type.startsWith("video/")){
            //       previewElement.setAttribute("controls", "true");
            //   } 
            //   parentElement.appendChild(previewElement);
            //   uploadedElement.value = "";
      }

      async function savePostToLocalStorage(postHTML, randID){
        // console.log(postHTML)
        console.log(randID);
        console.log(typeof randID);

          try{
            const response = await fetch('/new-post', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },      
                body: JSON.stringify({ content: postHTML, randID: randID })
             })

             if(response.status === 200){
                const result = await response.json();
                // alert(result.message)
             }
             else{
                console.log('Response status', response.status)
                console.log('Response text', await response.text())
                alert("Error updating new posts")
             }
          }
          catch(err){
              console.error(err);
              alert('Error updating new posts');
          }     
      }
  
      async function submitFeed() {
          const feedContent = feedInput.value.trim(); // get the user input post text 
          // new add...
          const randID = localStorage.getItem("randID") === null ? Math.random() : localStorage.getItem("randID") ; // get a random user ID
          localStorage.setItem("randID", randID.toString())

        //   console.log(randID);
        //   console.log("<%= avatar.userId %>");

          const randID_original_user_string = "<%= avatar.userId %>".toString() + randID.toString(); // get the randID with the original user 
        //   console.log(randID_original_user_string);
          

          if (feedContent !== "") { // execute only the user input is non-empty
            // new edited...
            // const newFeedPost = await createFeedPost(feedContent, randID); //

            // completed uploading name, avatar, text, img / video, now deconstruct the return object
            const { newFeedPost, isImageUploaded, isVideoUploaded } = await createFeedPost(feedContent, randID_original_user_string);

            // console.log(newFeedPost)

            // add the newly added to the top
            feedPost.insertBefore(newFeedPost, feedPost.firstChild); 

            // clear the user input box
            feedInput.value = "";

            // new edited... 

            // debug
            // console.log(newFeedPost)
            // console.log(newFeedPost.outerHTML)

            // savePostToLocalStorage(newFeedPost.outerHTML, randID);

            // Wait for images to load before logging

            // check if image uploaded 
            if(isImageUploaded){
                const imagePromises = Array.from(newFeedPost.querySelectorAll("img")).map((img) =>
                new Promise((resolve) => {
                    img.addEventListener("load", () => {
                        resolve(img.src);
                    });
                    })
                );

                Promise.all(imagePromises)
                    .then((srcs) => {
                        // console.log(newFeedPost);
                        // console.log(newFeedPost.outerHTML);
                        // Log the src content after all images have loaded
                        // console.log(srcs);

                        // save user post to mongodb
                        savePostToLocalStorage(newFeedPost.outerHTML, randID.toString());
                    })
                    .catch((error) => {
                        console.error("Error waiting for images to load:", error);
                    });
                }
            
            else if(isVideoUploaded){
                const videoPromises = Array.from(newFeedPost.querySelectorAll("video")).map((video) =>
                new Promise((resolve) => {
                    video.addEventListener("loadeddata", () => {
                        resolve(video.src);
                    });
                })
                );

                Promise.all(videoPromises)
                    .then((srcs) => {
                        // console.log(newFeedPost);
                        // console.log(newFeedPost.outerHTML);
                        // Log the src content after all images have loaded
                        // console.log(srcs);
                        savePostToLocalStorage(newFeedPost.outerHTML, randID.toString());
                    })
                    .catch((error) => {
                        console.error("Error waiting for images to load:", error);
                    });
            }
            }        
      }
          
      
      async function createFeedPost(content, randID) { // the first function called when submit button get clicked
          const newFeedPost = document.createElement("div"); // the outermost of feed post
          newFeedPost.classList.add("feed-post-item");
          newFeedPost.style.backgroundColor = "#FFF5E1";

          function createAvatarWithName() { // add avatar + name
              const avatar_with_name = document.createElement("div"); // create outermost container for avatar + name
              avatar_with_name.classList.add("avatar_with_name"); // create the class name for this container 
      
              if ("<%= avatar %>") {
                  const userName = document.createElement("p"); // create paragraph p for name
                  userName.classList.add("user-name"); // create class name for name
                  // add the name if it exist 
                  userName.textContent = "<%= typeof avatar !== 'undefined' && avatar !== null ? avatar.name : '' %>";
                  userName.style.fontWeight = "bold";

                  function createAvatarImage() {
                      const newAvatarImage = new Image(); // equivalent to document.createElement('img'). make outermost container for avatar
                      newAvatarImage.classList.add("small-avatar"); // create class name for avatar
                      newAvatarImage.src = "data:image/jpeg;base64," + avatarDataInput.value; // add the avatar content 
                      // new added....
                      const avatarButton = document.createElement("button")
                      avatarButton.style.border = "none"
                      avatarButton.style.background = "none"
                      avatarButton.appendChild(newAvatarImage)
                      // console.log(avatarButton)
                      return avatarButton
                      // return newAvatarImage;
                  }

                  avatar_with_name.appendChild(createAvatarImage());
                  avatar_with_name.appendChild(userName);
              }
              return avatar_with_name;
          }
  
          const avatar_with_name = createAvatarWithName(); // add avatar + name
          if (avatarDataInput.value) { // add to the outermost box only when avatar is presented
              newFeedPost.appendChild(avatar_with_name); 
          }
    
          const feedText = document.createElement("p"); // create paragraph for the user input text
          feedText.textContent = content; // add the content for the user in[ut text
          feedText.style.fontSize = "25px"; // adjust the user input text font
          newFeedPost.appendChild(feedText); // add the user input text to the outermost box

          const isImageUploaded = uploadedImage.files.length > 0; // check if there exist user upload photos
          const isVideoUploaded = uploadedVideo.files.length > 0; // check if there exist user upload video

          if(isImageUploaded && isVideoUploaded){
              alert("Please upload either an image or a video, but not both.");
              return;
          }
          else if(isImageUploaded){ // add the image if this exist 
              await appendUploadedFile(uploadedImage, "uploaded-image", newFeedPost); // 2
          }
          else if(isVideoUploaded){ // add hte video if this exist 
              await appendUploadedFile(uploadedVideo, "uploaded-video", newFeedPost);
          }
          // inside the createFeedPost function
          function createButton(text, className, deleteIDStr, clickHandler) {
              const button = document.createElement("button");
              button.textContent = text; // 'Delete'
              button.classList.add(className); // 'delete-button'

            //   console.log(deleteIDStr);
              // console.log(curr_user_deleteIDStr);

              
              // id is name of attribute to be set, deletedIDStr is value to set 
              button.setAttribute("id", deleteIDStr); // this is the randId
              console.log(deleteIDStr); // Third
              console.log(typeof deleteIDStr); // Third


              // button.setAttribute("curr_id", curr_user_deleteIDStr); // this is the userId

              if (clickHandler) { 
                button.addEventListener("click", clickHandler);
              }
              return button;
          }

          function createDeleteButton(post, deleteID) {

              console.log(deleteID.replace("<%= avatar.userId %>".toString(), '')); // second
              console.log(typeof deleteID.replace("<%= avatar.userId %>".toString(), '')); // second


              const extracted_randID = deleteID.replace("<%= avatar.userId %>".toString(), '');

              return createButton("Delete", "delete-button", deleteID, async () => {
                  try{
                    const response = await fetch('delete-post', {
                        method: 'DELETE',
                        headers: {
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ deleteID : extracted_randID }) // this is the newly generated random ID 
                    });

                    if(response.status === 200){
                        feedPost.removeChild(post);
                        // alert('Post deleted successfully');
                    }
                    else{
                        alert('Error deleting post')
                    }
                  }
                  catch(err){
                    console.error('Error deleting post', err);
                    alert('Error deleting post')
                  }
              });
          }
    
          // new add...
          const deleteID = randID; 

          console.log(deleteID); // First 
          console.log(typeof deleteID);
 
          // const curr_user_deleteID = "<%= avatar.userId%>"; // this one is for the debug

          // modified...
          const deleteButton = createDeleteButton(newFeedPost, deleteID); // add the delete button
          newFeedPost.appendChild(deleteButton); // add the delete button to the outermost post box

          // debug
          //   console.log(newFeedPost)
    
          //   return newFeedPost;

          return {
            newFeedPost: newFeedPost,  // the outermost post box 
            isImageUploaded: isImageUploaded, // check if image uploaded 
            isVideoUploaded: isVideoUploaded // check if video uploaded 
          }

      }
  
      function geoFindMe() {
          mapLink.href = "";
          mapLink.textContent = "Locating…";
    
          function success(position) {
              const { latitude, longitude } = position.coords;
              mapLink.href = `https://www.openstreetmap.org/#map=18/${latitude}/${longitude}`;
              mapLink.textContent = `Latitude: ${latitude}°, Longitude: ${longitude}°`;
              mapLink.style.color = "#808000";
              mapLink.style.fontWeight = "bold";
              mapLink.style.marginLeft = '10px';
          }
    
          function error() {
              mapLink.textContent = "Unable to retrieve your location";
          }
    
          if (!navigator.geolocation) {
              mapLink.textContent = "Geolocation is not supported by your browser";
          } 
          else {
              status.textContent = "Locating…";
              navigator.geolocation.getCurrentPosition(success, error);
          }
      }
  
      document.querySelector("#find-me").addEventListener("click", geoFindMe);
      document.querySelector(".send-feed").addEventListener("click", async function () {
          await submitFeed();
      });

      async function fetchAndDisplayPosts(){
           try{
                const response = await fetch('/getPosts')
                if(!response.ok){
                    alert('Error retrieving user posts')
                    return
                }
                const data = await response.json();
                const posts = data.posts;

                for (let i = posts.length - 1; i >= 0; i--) {
                    const post = posts[i];
                    // console.log(post.userNewPost)
                    // console.log(post)

                    const postElement = document.createElement('div');
                    postElement.innerHTML = post.userNewPost;

                    // console.log(postElement)

                    feedPost.appendChild(postElement);
                }

                // new add...
                const deleteButton = document.querySelectorAll('.delete-button');
                deleteButton.forEach((button) => {
                    console.log(button.id);
                    console.log(typeof button.id);

                    console.log("<%= avatar.userId %>".toString());
                    console.log(typeof "<%= avatar.userId %>".toString());

                    console.log(button.id.replace("<%= avatar.userId %>".toString(), ''));
                    console.log(typeof button.id.replace("<%= avatar.userId %>".toString(), ''));
                    
                    button.addEventListener('click', async () => {
                    //    const deleteID = parseFloat(button.id); // here is the bug: will always get what the owner put as randID
                    //    const prev_user_deleteID = parseFloat(button.curr_id);


                          if(button.id.includes("<%= avatar.userId %>".toString())){
                            const extracted_randID = button.id.replace("<%= avatar.userId %>".toString(), '');


                            console.log(extracted_randID);
                            console.log(typeof extracted_randID);
                       
                    //    if(parseFloat(button.ownerid) === "<%= avatar.userId %>"){
                            try{
                                const response = await fetch('delete-post', {
                                    method: "DELETE",
                                    headers: { 'Content-Type': 'application/json' }, 
                                    body: JSON.stringify({ deleteID: extracted_randID })
                                });

                                if(response.status === 200){
                                    // feedPost.innerHTML = '';
                                    location.reload(); // refresh the browser page if successfully deleted 
                                    // alert('Post delete successfully');
                                }
                                else{
                                    alert('Error deleting posts');
                                }
                            }
                            catch(err){
                                console.error('Error deleting posts', err);
                                alert('Error deleting posts');
                            }
                           }
                          else{
                            alert('You can only delete your own post');
                          }

                    //    try{
                    //       const response = await fetch('delete-post', {
                    //           method: "DELETE",
                    //           headers: { 'Content-Type': 'application/json' }, 
                    //           body: JSON.stringify({ deleteID })
                    //       });

                    //       if(response.status === 200){
                    //           // feedPost.innerHTML = '';
                    //           location.reload(); // refresh the browser page if successfully deleted 
                    //           // alert('Post delete successfully');
                    //       }
                    //       else{
                    //           alert('Error deleting posts');
                    //       }
                    //    }
                    //    catch(err){
                    //       console.error('Error deleting posts', err);
                    //       alert('Error deleting posts');
                    //    }
                    });
                // });
                });
            }
           catch(err){
                console.error('Error retrieving user posts', err)
                alert('Error retrieving user posts')
           }
      }
      fetchAndDisplayPosts() // show all previously added user post 
  });
</script>



