<script type="module">
    document.addEventListener("DOMContentLoaded", function() {
      const feedsButton = document.getElementById("feeds");
      const serverButton = document.getElementById("server");
      const requesterButton = document.getElementById("requester");
      const feedPost = document.querySelector(".feed-post");
      const feedInput = document.querySelector(".feed-input");
      const avatarDataInput = document.querySelector("#avatarData");
      const status = document.querySelector("#status");
      const mapLink = document.querySelector("#map-link");
      const uploadedImage = document.querySelector("#image-upload");
      const uploadedVideo = document.querySelector("#video-upload");

      function navigateToPage(page) {
          window.location.href = `./${page}`;
      }
  
      feedsButton.addEventListener("click", () => navigateToPage("login"));
      serverButton.addEventListener("click", () => navigateToPage("kusi-server"));
      requesterButton.addEventListener("click", () => navigateToPage("kusi-client"));


      async function appendUploadedFile(uploadedElement, className, parentElement) {
          if (uploadedElement.files.length > 0) {
              const file = uploadedElement.files[0];
              const previewElement = document.createElement(file.type.startsWith("image/") ? "img" : "video");
              previewElement.classList.add(className);

              // Create a FileReader to read the image file
              const reader = new FileReader();

              // Define an event handler when the reading is done
              reader.onload = async function() {
                  const base64Data = await reader.result;
                //   console.log(base64Data)
                //   previewElement.src = base64Data;
                  previewElement.src = base64Data
                //   await submitFeed()
                //   console.log(previewElement)
                             
                //   parentElement.appendChild(previewElement);

                //   console.log(parentElement)

                //   uploadedElement.value = "";   
              };

              if (file.type.startsWith("video/")){
                  previewElement.setAttribute("controls", "true");
              }

              parentElement.appendChild(previewElement);

            //   console.log(parentElement)

              uploadedElement.value = "";   

              reader.readAsDataURL(file);

            //   if (file.type.startsWith("video/")){
            //      previewElement.setAttribute("controls", "true");
            //   } 

            //   parentElement.appendChild(previewElement);
            //   uploadedElement.value = "";   
          };

              // console.log(previewElement)

              // Read the image file as a data URL (base64 encoding)
            //   reader.readAsDataURL(file);

              // previewElement.src = URL.createObjectURL(file);
              
            //   if (file.type.startsWith("video/")){
            //       previewElement.setAttribute("controls", "true");
            //   } 
            //   parentElement.appendChild(previewElement);
            //   uploadedElement.value = "";
        }

      async function savePostToLocalStorage(postHTML, randID){
        // console.log(postHTML)
          try{
            const response = await fetch('/new-post', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },      
                body: JSON.stringify({ content: postHTML, randID: randID })
             })

             if(response.status === 200){
                const result = await response.json();
                // alert(result.message)
             }
             else{
                console.log('Response status', response.status)
                console.log('Response text', await response.text())
                alert("Error updating new posts")
             }
          }
          catch(err){
              console.error(err);
              alert('Error updating new posts');
          }     
      }
  
      async function submitFeed() {
          const feedContent = feedInput.value.trim();
          // new add...
          const randID = Math.random();

          if (feedContent !== "") {
            // new edited...
            // const newFeedPost = await createFeedPost(feedContent, randID); // 1
            const { newFeedPost, isImageUploaded, isVideoUploaded } = await createFeedPost(feedContent, randID);

            // console.log(newFeedPost)
            feedPost.insertBefore(newFeedPost, feedPost.firstChild);
            feedInput.value = "";

            // new edited... 

            // debug
            // console.log(newFeedPost)
            // console.log(newFeedPost.outerHTML)

            // savePostToLocalStorage(newFeedPost.outerHTML, randID);

            // Wait for images to load before logging

            if(isImageUploaded){
                const imagePromises = Array.from(newFeedPost.querySelectorAll("img")).map((img) =>
                new Promise((resolve) => {
                    img.addEventListener("load", () => {
                        resolve(img.src);
                    });
                    })
                );

                Promise.all(imagePromises)
                    .then((srcs) => {
                        // console.log(newFeedPost);
                        // console.log(newFeedPost.outerHTML);
                        // Log the src content after all images have loaded
                        // console.log(srcs);
                        savePostToLocalStorage(newFeedPost.outerHTML, randID);
                    })
                    .catch((error) => {
                        console.error("Error waiting for images to load:", error);
                    });
                }
            
            else if(isVideoUploaded){
                const videoPromises = Array.from(newFeedPost.querySelectorAll("video")).map((video) =>
                new Promise((resolve) => {
                    video.addEventListener("loadeddata", () => {
                        resolve(video.src);
                    });
                })
                );

                Promise.all(videoPromises)
                    .then((srcs) => {
                        console.log(newFeedPost);
                        console.log(newFeedPost.outerHTML);
                        // Log the src content after all images have loaded
                        console.log(srcs);
                        savePostToLocalStorage(newFeedPost.outerHTML, randID);
                    })
                    .catch((error) => {
                        console.error("Error waiting for images to load:", error);
                    });
            }
            }   
            
      }
          
      
      async function createFeedPost(content, randID) {
          const newFeedPost = document.createElement("div");
          newFeedPost.classList.add("feed-post-item");
          newFeedPost.style.backgroundColor = "#FFF5E1";

          function createAvatarWithName() {
              const avatar_with_name = document.createElement("div");
              avatar_with_name.classList.add("avatar_with_name");
      
              if ("<%= avatar %>") {
                  const userName = document.createElement("p");
                  userName.classList.add("user-name");
                  userName.textContent = "<%= typeof avatar !== 'undefined' && avatar !== null ? avatar.name : '' %>";
                  userName.style.fontWeight = "bold";

                  function createAvatarImage() {
                      const newAvatarImage = new Image();
                      newAvatarImage.classList.add("small-avatar");
                      newAvatarImage.src = "data:image/jpeg;base64," + avatarDataInput.value;
                      // new added....
                      const avatarButton = document.createElement("button")
                      avatarButton.style.border = "none"
                      avatarButton.style.background = "none"
                      avatarButton.appendChild(newAvatarImage)
                    //   console.log(avatarButton)
                      return avatarButton
                      // return newAvatarImage;
                  }

                  avatar_with_name.appendChild(createAvatarImage());
                  avatar_with_name.appendChild(userName);
              }
              return avatar_with_name;
          }
  
          const avatar_with_name = createAvatarWithName(); // add avatar + name
          if (avatarDataInput.value) {
              newFeedPost.appendChild(avatar_with_name);
          }
    
          const feedText = document.createElement("p");
          feedText.textContent = content;
          feedText.style.fontSize = "25px";
          newFeedPost.appendChild(feedText);

          const isImageUploaded = uploadedImage.files.length > 0;
          const isVideoUploaded = uploadedVideo.files.length > 0;

          if(isImageUploaded && isVideoUploaded){
              alert("Please upload either an image or a video, but not both.");
              return;
          }
          else if(isImageUploaded){
              await appendUploadedFile(uploadedImage, "uploaded-image", newFeedPost); // 2
          }
          else if(isVideoUploaded){
              await appendUploadedFile(uploadedVideo, "uploaded-video", newFeedPost);
          }

          function createButton(text, className, deleteIDStr, clickHandler) {
              const button = document.createElement("button");
              button.textContent = text;
              button.classList.add(className);
              button.setAttribute("id", deleteIDStr);
              if (clickHandler) {
                button.addEventListener("click", clickHandler);
              }
              return button;
          }

          function createDeleteButton(post, deleteID) {
              const deleteIDStr = deleteID.toString();
              return createButton("Delete", "delete-button", deleteIDStr, async () => {
                  try{
                    const response = await fetch('delete-post', {
                        method: 'DELETE',
                        headers: {
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ deleteID })
                    });

                    if(response.status === 200){
                        feedPost.removeChild(post);
                        // alert('Post deleted successfully');
                    }
                    else{
                        alert('Error deleting post')
                    }
                  }
                  catch(err){
                    console.error('Error deleting post', err);
                    alert('Error deleting post')
                  }
              });
          }
    
          // new add...
          const deleteID = randID;

          // modified...
          const deleteButton = createDeleteButton(newFeedPost, deleteID);
          newFeedPost.appendChild(deleteButton);

          // debug
        //   console.log(newFeedPost)
    
        //   return newFeedPost;

          return {
            newFeedPost: newFeedPost, 
            isImageUploaded: isImageUploaded,
            isVideoUploaded: isVideoUploaded
          }

      }
  
      function geoFindMe() {
          mapLink.href = "";
          mapLink.textContent = "Locating…";
    
          function success(position) {
              const { latitude, longitude } = position.coords;
              mapLink.href = `https://www.openstreetmap.org/#map=18/${latitude}/${longitude}`;
              mapLink.textContent = `Latitude: ${latitude}°, Longitude: ${longitude}°`;
              mapLink.style.color = "#808000";
              mapLink.style.fontWeight = "bold";
              mapLink.style.marginLeft = '10px';
          }
    
          function error() {
              mapLink.textContent = "Unable to retrieve your location";
          }
    
          if (!navigator.geolocation) {
              mapLink.textContent = "Geolocation is not supported by your browser";
          } 
          else {
              status.textContent = "Locating…";
              navigator.geolocation.getCurrentPosition(success, error);
          }
      }
  
      document.querySelector("#find-me").addEventListener("click", geoFindMe);
      document.querySelector(".send-feed").addEventListener("click", async function () {
          await submitFeed();
      });

      async function fetchAndDisplayPosts(){
           try{
                const response = await fetch('/getPosts')
                if(!response.ok){
                    alert('Error retrieving user posts')
                    return
                }
                const data = await response.json();
                const posts = data.posts;

                for (let i = posts.length - 1; i >= 0; i--) {
                    const post = posts[i];
                    // console.log(post.userNewPost)
                    // console.log(post)

                    const postElement = document.createElement('div');
                    postElement.innerHTML = post.userNewPost;

                    // console.log(postElement)

                    feedPost.appendChild(postElement);
                }

                // new add...
                const deleteButton = document.querySelectorAll('.delete-button');
                deleteButton.forEach((button) => {
                    button.addEventListener('click', async () => {
                       const deleteID = parseFloat(button.id);
                       // new add...
                       try{
                          const response = await fetch('delete-post', {
                              method: "DELETE",
                              headers: { 'Content-Type': 'application/json' }, 
                              body: JSON.stringify({ deleteID })
                          });

                          if(response.status === 200){
                              // feedPost.innerHTML = '';
                              location.reload(); // refresh the browser page
                              // alert('Post delete successfully');
                          }
                          else{
                              alert('Error deleting posts');
                          }
                       }
                       catch(err){
                          console.error('Error deleting posts', err);
                          alert('Error deleting posts');
                       }
                    });
                });
           }
           catch(err){
                console.error('Error retrieving user posts', err)
                alert('Error retrieving user posts')
           }
      }
      fetchAndDisplayPosts()
  });
</script>



